#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int main()
{
    int n, m,source;
    cout << "Input number of nodes and edges " <<endl;
    cin >> n>>m;
    vector<vector<pair<int,int>>> adj(n);
    vector<int> dist(n, 1e9),parent(n);
    cout << "Input adjacency list";
    for (int i = 0; i < m; i++)
    {
        int u,v,wt;
        cout<<"Input u and v";
        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
    }
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    for(int i=0;i<n;i++)
    {
        parent[i]=i;
    }
    cout<<"Input source";
    cin>>source;
    pq.push({0,0});
    dist[source]=0;
    while (!pq.empty())
    {
        auto it =pq.top();
        pq.pop();
        int node=it.first;
        int edw=it.second;
        for(auto it:adj[node])
        {
            int cost=it.first;
            int adjnode=it.second;
            if(dist[adjnode] > cost+edw)
            {
                dist[adjnode]=cost+edw;
                pq.push({cost+edw,adjnode});
                parent[adjnode]=node;
            }
        }
    }
    int node=n;
    vector<int>ans;
    while(parent[node]!=node)
    {
        ans.push_back(node);
        node=parent[node];
    }
    for(int i=0;i<ans.size();i++)
    {
        cout<<ans[i];
    }
}
